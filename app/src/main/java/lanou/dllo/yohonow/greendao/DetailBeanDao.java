package lanou.dllo.yohonow.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_BEAN".
*/
public class DetailBeanDao extends AbstractDao<DetailBean, Long> {

    public static final String TABLENAME = "DETAIL_BEAN";

    /**
     * Properties of entity DetailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PublishURL = new Property(1, String.class, "publishURL", false, "PUBLISH_URL");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property TagName = new Property(4, String.class, "tagName", false, "TAG_NAME");
        public final static Property Image = new Property(5, String.class, "Image", false, "IMAGE");
        public final static Property VideoURL = new Property(6, String.class, "videoURL", false, "VIDEO_URL");
        public final static Property Type = new Property(7, int.class, "type", false, "TYPE");
    }


    public DetailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DetailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PUBLISH_URL\" TEXT," + // 1: publishURL
                "\"TITLE\" TEXT," + // 2: title
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"TAG_NAME\" TEXT," + // 4: tagName
                "\"IMAGE\" TEXT," + // 5: Image
                "\"VIDEO_URL\" TEXT," + // 6: videoURL
                "\"TYPE\" INTEGER NOT NULL );"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetailBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String publishURL = entity.getPublishURL();
        if (publishURL != null) {
            stmt.bindString(2, publishURL);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String tagName = entity.getTagName();
        if (tagName != null) {
            stmt.bindString(5, tagName);
        }
 
        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(6, Image);
        }
 
        String videoURL = entity.getVideoURL();
        if (videoURL != null) {
            stmt.bindString(7, videoURL);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetailBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String publishURL = entity.getPublishURL();
        if (publishURL != null) {
            stmt.bindString(2, publishURL);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String tagName = entity.getTagName();
        if (tagName != null) {
            stmt.bindString(5, tagName);
        }
 
        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(6, Image);
        }
 
        String videoURL = entity.getVideoURL();
        if (videoURL != null) {
            stmt.bindString(7, videoURL);
        }
        stmt.bindLong(8, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetailBean readEntity(Cursor cursor, int offset) {
        DetailBean entity = new DetailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // publishURL
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tagName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Image
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoURL
            cursor.getInt(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetailBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPublishURL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTagName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoURL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetailBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetailBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetailBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
